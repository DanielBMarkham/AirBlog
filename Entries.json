{"records":[{"id":"recEUbufzhAvph8K1","fields":{"TemplateFile":"Entry2.html","Blog":["recCGKQBlTWHqrGCu"],"Media":["recdf2rMVu3fw8QHQ"],"StartDate":"2018-12-18T05:00:00.000Z","Approved":true,"Title":"The Platform is the Enemy","Content":"\n![](Idiocracy-insertRight)\n\nThe premise of the movie \"Idiocracy\" is simple: in the future mankind has de-evolved into morons. Technology does so much for everybody that nobody knows how it all works anymore.  If we can't fix it, we're all going to die. \n\nOne character asks the other what he likes, The answer is money.\n\n\"I can't believe you like money too!\" the first character says without irony, \"We should hang out!\"\n\nThe gag here is that of course, most everybody likes money. If you reduce all of your life enough, it's just food, sex, money, and looking cool. But who would want to do that? Over the centuries, humans have created massively-complex societies because everybody has different things they like doing and thinking about, but all of that complexity can be reduced to, well, an idiocracy if you try hard enough.\n\nThe movie, however, is just a joke, right? We would never allow that to happen, of course, because that's not the goal of technology. Technology's goal is to make us better, not dumber.\n\nWait one. Is that true? What *is* the goal of technology, anyway? Has anybody ever clearly stated it?\n\nRecently I've heard two goals:\n\n1. The goal of technology is to become a **brain extension**, *helping you to decide what to do* and then helping you get it done.\n2. The goal of technology is to become a **hand-held power tool**, helping you accomplish the things you've *already decided to do*\n\nThat's not the same thing. It turns out the difference is critical.\n\nThe old goal was much simpler: make something people want. I like that goal! It boils down the job of creating technology to the most important parts, need and ability. But was that sustainable? At the end of the day, don't we always end up making some combination of stuff that either helps us *make decisions* or helps us *implement decisions* we've already made? And aren't the two fundamentally incompatible in a future society?\n\nYelp tells you which restaurant to go to. Your GPS automatically takes you there. These are not just different problems, they're different *kinds of problems*. Getting from point A to point B is a matter of math and geometry. Which restaurant is the best tonight? You could spend hours debating that with friends.\n\nIf you reduce anything down enough it becomes idiotic. Each piece of technology we deploy can have the goal of helping us do what we've already decided or helping us decide what to do. The first option leaves the thinking up to us. The second option \"helps\" us think.\n\n<div>\n<div class=\"embed-responsive embed-responsive-16by9\">\n<iframe class=\"embed-responsive-item\" src=\"https://www.youtube.com/embed/sZHCVyllnck?rel=0\" allowfullscreen></iframe>\n</div>\n<p class=\"figure-caption text-center text-muted\">\nYou like money too? Wow! I like money! We should hang out!\n</p>\n</div>\n\nHuman brains are not computers. Brains are designed to help us survive and pass on our genes using the minimum amount of energy available. If the GPS takes me where I'm going, I don't need to know how to use maps anymore. So I stop knowing how to use maps. Dump those neurons, they're not needed. If Yelp picks the restaurants for me enough, I stop having nuanced preferences about restaurants. That energy expenditure is no longer needed for survival and reproduction. Dump those neurons. Over time people stop caring about the tiny details of what the difference is between a good and a great restaurant. Yelp handles that.\n\nFor some folks, who cares? It's food. Go eat it. For other folks, picking the right place can be a serious undertaking, worthy of heavy thought and consideration. But if over the years apps like Yelp boil all of that down to four or five stars, then our collective brain is not going to bother with it. Human brains are not computers. If computers do the work for us, we turn off those neurons and save energy.\n\nMeanwhile, on social media there's currently this huge discussion. One bunch of folks says that social media is being overbearing in its censorship of fringe and sometimes hateful opinions. The other bunch of folks says social media is a festering sore full of people who are ugly, hateful, and abusive to those weakest among us. The community has to set standards.\n\nThere doesn't have to be a right and wrong here. I think the crucial thing to to understand that both sides can be entirely correct. We are dealing with the same kind of question.\n\nAll three of these topics -- whether humanity is becoming idiots or not, what the ultimate goal of technology is or should be, and how social media should work -- are intricately related. They're related because of this: *the platform is the enemy*.\n\nThe minute we create a platform for something, whether it's rating movies, tracking projects, or chatting with friends about work, as that platform takes over mindshare, *the assumption becomes that this is a solved problem*.\n\nThe telephone was great. Once we had the telephone, people didn't have to worry about how to talk to people far away anymore. Just pick up the phone. Solved problem.\n\nFacebook is great. Once we had Facebook, people didn't have to worry about how to interact with their friends in a social setting anymore. Just click on the little FB notification (Which seems to be always flashing for some reason to get my attention) Solved problem?\n\nBut these are entirely different things! With the phone, I know who I want to call and why. I push buttons and we are connected. The tech helps me do what I've already decided to do. With Facebook, on the other hand, they get paid to show me things in a certain order. The premise is that I'm waiting (or \"exploring\" if you prefer) until I find something to interact with. The phone is a tool for me to use. I am the tool Facebook is using. I am no longer acting. I am reacting.\n\nAnd even if they weren't paid, interacting with friends socially is an extremely complex affair. What kind of mood are they in? What's their life history? What things are bad to bring up? How does their body language look? Facebook's gimmick is \"Hey, we've reduced all of this to bits and bytes, and we'll even show you what bits and bytes to look at next!\"\n\nSolved problem.\n\nMany, many people do not use the internet, the internet uses them. And this percentage is constantly growing.\n\nJust like the restaurant example, maybe that's fine. I have friends, I have opinions, who cares? It's all idle chat anyway.\n\nThat logic can be true for a bunch of things, but can't be true for *everything*. Otherwise, at some point 100 years from now, we're comparing our life values and end up saying something like \"I like money too\". Everything can't all be reduced down to the lowest common denominator. If it does, we all die.\n\nLife is not a bit or byte, a number to be optimized. It's meaning we define ourselves, in ways we should not quantize. \n\nPlatforms, by their very nature, constantly send out the subtle message: *This is a solved problem. No further effort on your part is required here. No thinking needed.* Platforms resist change. They resist their own evolution by subtly poisoning the discussion before it even starts. \n\nAre restaurant choices more or less important than which movie to watch tonight? There's no right or wrong answer to these questions. We have nice categories like restaurants and movies because currently people consider those things to be different kinds of choices. But why? If the algorithm is king, why shouldn't an algorithm determine both of those things for me? And if it does, why should I bother with worrying about which category is which?\n\nHuman brains are not computers. Let the platform decide. Energy not needed. Dump those neurons.\n\nThis is the more important point. It's not that the platforms turn what might be complex things into simple numbers, or even that they monetize attention. It's that by turning everything into numbers, over time they destroy the distinction between the categories entirely. Platforms are the enemy because they resist analysis in the areas they dominate.\n\nPlatforms turn into settled fact things that should be open for debate, like whether or not Taco Bell is a Mexican restaurant, or whether Milo is an artist with something useful to tell us. (I'm going with \"no\" and \"no\" for both of these.) More dangerously, they do the work of deciding *what categories various things go into*. This category over here is important. That category over there is not. We all make these decisions, and they're all different, and the categories each of us pays careful attention to and loves obsessing about are all different, and because we all have different viewpoints and priorities humankind advances in thousands of directions simultaneously. We survive. We evolve.\n\nTwitter has to decide whether PERSON_X can speak or not because on the Twitter platform, that question has to have a yes or no answer based on the person. Twitter's category for deciding who can speak is \"who is that?\" Is that the right category for social conversations? For political conversations? For conversations about philosophy? Math? Who knows? Who cares? Twitter has decided. Solved problem.\n\nEverybody has different things they like doing and thinking about. Different conversations and audiences have different criteria. Some problems should never be solved. Or rather more directly, some problems should never have a universal answer.\n\nAn aside: We see the same thing in programming. One bunch of folks creates various platforms in order to do the thinking for another bunch of folks. Sometimes these platforms take off and become industry standards. That's quite rare, however. Most of the time we end up training morons who can weakly code against the platform but can't reason effectively about the underlying architecture or reason for the platform to exist in the first place. In our desire to help, we harm the very people we're trying to assist -- by subtly giving them the impression that this is a solved problem. Programmers are just a decade or so ahead of the rest of us.\n\nPopular platforms aren't just a danger economically because they control commerce. They're not just a danger politically because they selectively control and amplify political discourse. They're an extinction-level, existential danger to humans because they prevent people from seriously considering what kinds of categories are important in each of their lives. They resist their own analysis and over time make people dumber. Right now we're skating through the danger because we're harvesting people from less-advanced countries to do our hard-thinking for us. That window is quickly drawing to a close.\n\n![](Terminator-insertLeft)\n\nAI isn't a clear and present danger to our species because we're going to end up fighting the robots like in Terminator. AI is a clear and present danger to our species because it might end up doing exactly what some of us want it to do: become a brain extension.\n\nIf we can't fix this, we're all going to die.\n\nThe Idiocracy starts here. It starts now.\n\n","Tags":["reca8DqcFBPyWFHih","rec8Q7Sn8p6DNLNKJ","receRQaf4IK9F57ip"],"Categories":["recD6fV22IR0LSVdB"],"ID":10,"Excerpt":"Idiocracy is now","Authors":["recPwgCd6QGPvd5Fg"]},"createdTime":"2018-12-19T10:48:19.000Z"},{"id":"rec39SaDeZCZjauRo","fields":{"TemplateFile":"Entry2.html","Blog":["recCGKQBlTWHqrGCu"],"StartDate":"2018-12-11T05:00:00.000Z","Approved":true,"Title":"2000-200-20","Content":"## What if we budgeted our code like we budget everything else?\n\nHow much does a line of code cost?\n\nThe naive answer is that it costs nothing. Bytes are free -- or as close to free as we can come. But it *has* to cost something. After all, it took time to type in, right? So that takes us to our first rule of \"Code Economics\": the cost of a line of code is measured in how much time we spend working with it.\n\nHow much value is in a line of code?\n\nThe naive answer is that the economic value of a line of code is the value of the application (which can be measured various ways) divided by the total line-of-codes (LOC). If you're making $10K per month from a thousand lines of code, each line is bringing in $10.\n\nBut that's obviously not true. We know that the same application can be written using a thousand, ten thousand, or a hundred thousand LOC. The thing the application does for people -- its value -- and the amount of code it takes to write it? They're not related at all. That takes us to the second rule of \"Code Economics\": a line of code has no value whatsoever. It only has value as part of some deployable application. The application is the smallest unit of economic value. (Actually, it's UX flow, but for our purposes today an application supports one UX flow that the user finds value interacting with.)\n\nThe value of an app is more directly measurable. Yes, sometimes it gets more complicated, like if the business purpose of the app is in-app purchases or referrals, but at some point money comes in and we can trace that money back to the app. \n\nHow about the cost of a line of code? Is it just the time we spend typing it in? That's obviously wrong. You have to design it, even if only in your head. You have to test it. You have to deploy it. In fact, once you start thinking about it, there's no limit to the amount of money you can spend on a line of code. If your app is successful, you might spend the rest of your lifetime maintaining that line of code -- looking at it every now and then, tweaking it, changing how it's used. \n\nOf course, most lines of code either work fine or they never provide enough value to make anybody bother with them again. (No economic value = no technical debt) But, assuming you know enough to write an app that has value, each line of code in that app has an potentially-infinite cost.\n\nSo value comes in app-sized chunks while costs is related to the tiny pieces we use to make that app -- and to a large degree this is under our control.\n\nWe have a way in finance of dealing with things that have a limited value but a potentially-unlimited downside. We use a budget. I could go out next month and buy $500 worth of sugar-free bubblegum (I love the stuff), but I don't. I have a budget of $10 per month and I stick to it. That's not because bubblegum is such a huge drain on our finances. It's because little things add up. Without a budget, I have no reasonable way for my wife and I to discuss what's important to us. The budget isn't important. The conversation about values it drives is irreplaceable. \n\n![](CodeEconomicsCenter)\n\n### So why aren't we budgeting our code?\n\nSo far in our discussion, there's really no reason to pick one set of budget numbers over another. Should we limit our applications to a million lines of code? A hundred? We don't know. We can safely say two things. One, given the same value, more code equals more cost. Two, lines-of-code always grows out-of-control the more we poke at it. This leads to the conclusion in the third rule of Code Economics: the only way to limit the costs of solving a problem using programming is to arbitrarily limit the amount of code humans have to mentally-manipulate solving it.\n\nIn a way, this is all common sense. We've been doing it for years. We just haven't been explicit about it. Shared libraries, frameworks, industry standards, and a dozen other things all exist in an effort to limit the amount of code humans have to mentally-manipulate to solve problems.\n\nSo why haven't we succeeded? Why can't most programmers today do their job using four or five lines of code?\n\nBecause lines-of-code always grows the more we poke at it. When the http protocol first appeared, if you wanted a web page? You brought up a terminal and telnetted a small number of commands. Boom, there's your webpage. Now, there are easily 10, maybe 20 various standards and libraries related to what used to be 10 seconds of work. Fifty years from now there will be 40 standards. Same value, more code. Value stays the same, cost of code continues to increase.\n\nI'd like to suggest a completely random rule that I just made up: ***Arbitrarily limit lines of code used to solve a problem and write the app with the goal of never touching it again***\n\nFurthermore, since I'm making stuff up, how about a 2000-200-20 rule for folks writing microservices? Whatever problem you have to solve using microservices, you have 20 microservices to solve it in. Each of those microservices can be written with no more than 200 lines of unique code.\n\nBut wait, I hear you say. That's never going to work! Okay, so among all of those microservices you can have 2,000 lines of code in a shared library. Anything you could ever touch counts as code.\n\nI'm not going to defend my made-up rules aside from saying that budgets always seem arbitrary, and it's not right to create a budget so small that the work can't get done. I don't believe I've done that here -- but I might be wrong! Use other budgets if you like. Hell if I care. But use budgets.\n\nMost programmers probably don't think such a budget is fair, or workable. And I think it's fine. That's fascinating to me and indicates a lack of alignment somewhere in the way we train and socialize programmers.\n\nI'm also suggesting a new thing that has to happen: a code budgeting discussion. Yes, Daniel, your WhizzBang widget is freaking awesome, but it uses 500 lines of code, and that's 500 lines we can't afford right now.\n\nWhoa horsey! Wouldn't I love to hear somebody actually say that! Cost control, in a programming team. Imagine that! And what would come next? I have no idea!\n\nBut I could guess.\n\nDon't some problems require a lot of code? Don't some applications -- most, in fact -- require us to come back to them again and again in order to keep them in alignment with changing user needs?\n\nBoth statements are true. For complex things, we write components. Those components have executing tests that describe them and are used/shared in multiple places. The more they are used/shared, the better they get. That means that components are just another project. It also means that if you don't have multiple teams using your component, you don't have a component. Component creation should be a decision made between teams and involve a completely new project. After all, they have both cost and value.\n\nWhat about coming back to tweak the app as the business needs change? Assuming you have a release that is currently demonstrating value -- a big assumption, by the way -- I think you have to timebox it. Three months of verifying that the app got things mostly right. After that? You write a new app, of course. With the budget we're talking about it's not going to be a huge effort, you've already been living in this space, and it's good to rethink things. Code budgets and timelines prevent [Second System Syndrome](https://en.wikipedia.org/wiki/Second-system_effect). (I think we went off-the-rails somewhere with Second System Syndrome, but I digress)\n\nThere are parts of this essay that are completely made-up. I tried to point those out. There are also parts that are built on decades of experience both coding solutions and watching teams work. What I've seen over-and-over again is that really cool things happen with smart people and creative constraints. Really stupid stuff happens otherwise, because without constraints it's all [bike shedding](https://en.wikipedia.org/wiki/Law_of_triviality).\n\nYou need to start budgeting your code.\n\n![](DanielsSignature)","Tags":["reca8DqcFBPyWFHih"],"Categories":["recZLPmdZt7GBUMCG"],"ID":8,"Excerpt":"Constraints make better solutions. Perhaps thinking of programming in economic terms can help us come up with better constraints that will drive better solutions.","Authors":["recPwgCd6QGPvd5Fg"]},"createdTime":"2018-12-11T10:13:10.000Z"},{"id":"recNvtZLennBcMCHF","fields":{"TemplateFile":"Entry2.html","Blog":["recCGKQBlTWHqrGCu"],"StartDate":"2018-12-06T18:06:00.000Z","Approved":true,"Title":"Why are Reusable Components so Difficult?","Content":"A couple of weeks ago, Uwe Friedrichsen asked a pretty good question [on his blog](https://blog.codecentric.de/en/2015/10/the-broken-promise-of-re-use/):\n\n*\"...Re-use is the holy grail of IT: whenever a new architectural paradigm comes to IT town, 're-use' is one of the core arguments why to go for that paradigm. The business sales pitch typically goes like this: 'Switching to <insert new paradigm here> will cost some money upfront but due to the re-use it enables it will soon pay back'...In short words: re-use based on any architectural paradigm never worked as promised, the promise was always broken...\"*\n\nHe offers up CORBA, Component-based architectures, EJB, SOA -- then asks if microservices will be any different. Why is the promise of re-use broken? Why can't we create truly reusable code?\n\nThese are great examples, and Friedrichsen does a pretty good job of going over his version of why reuse sucks so bad. You should read his essay. I believe, however, he misses the key point: **classic OO and pure functional programming lead to vastly-different endgames when it comes to reusability because they're based on different assumptions**.\n\nLet's perform an experiment. Holding everything else the same, let's implement the game \"FizzBuzz\" in idiomatic pure FP and OO using F# and C#. That's about as small a code example as I can come up with. First, the F#:\n\n<pre style=\"font-family:Consolas;font-size:13px;color:black;background:white;\"><span style=\"color:blue;\">let</span>&nbsp;(|DivisibleBy|_|)&nbsp;by&nbsp;n&nbsp;=&nbsp;<span style=\"color:blue;\">if</span>&nbsp;n%by=0&nbsp;<span style=\"color:blue;\">then</span>&nbsp;Some&nbsp;DivisibleBy&nbsp;<span style=\"color:blue;\">else</span>&nbsp;None\n<span style=\"color:blue;\">let</span>&nbsp;findMatch&nbsp;=&nbsp;<span style=\"color:blue;\">function</span>\n&nbsp;&nbsp;|&nbsp;DivisibleBy&nbsp;3&nbsp;&amp;&nbsp;DivisibleBy&nbsp;5&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#a31515;\">&quot;FizzBuzz&quot;</span>\n&nbsp;&nbsp;|&nbsp;DivisibleBy&nbsp;3&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#a31515;\">&quot;Fizz&quot;</span>\n&nbsp;&nbsp;|&nbsp;DivisibleBy&nbsp;5&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#a31515;\">&quot;Buzz&quot;</span>\n&nbsp;&nbsp;|&nbsp;_&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#a31515;\">&quot;&quot;</span>\n[&lt;EntryPoint&gt;]\n<span style=\"color:blue;\">let</span>&nbsp;main&nbsp;argv&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;[1..100]&nbsp;|&gt;&nbsp;Seq.map&nbsp;findMatch&nbsp;|&gt;&nbsp;Seq.iteri&nbsp;(printfn&nbsp;<span style=\"color:#a31515;\">&quot;%i&nbsp;%s&quot;</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<span style=\"color:green;\">//&nbsp;we&#39;re&nbsp;good.&nbsp;Return&nbsp;0&nbsp;to&nbsp;indicate&nbsp;success&nbsp;back&nbsp;to&nbsp;OS</span></pre>\n\nLooks like about a dozen lines of code. Notice these three things:\n\n- It's all in \"pieces\". Nothing is connected to anything. There's a weird thing called DivisibleBy, then there's a chunk of stuff that looks like the main FizzBuzz program. But it's not called from there. Instead, there's this third chunk -- the only \"real\" line of code, which only one line. If you didn't know any better, you wouldn't know what chunk went with what.\n- At the end of the FizzBuzz game, we usually ask, \"What if there is yet another rule?\" In this case, it's obvious from the code that you'd just add something to those DivisibleBy lines in the second chunk. Nothing else would change.\n- Once the pieces are in-place, it looks much more fluid as to how the final line would work. If you're a functional programmer, you realize that the final chunk is really up to the programmer. Here I've done it \"point-free\", which is just piping things from one place to another. But I could have done it several other ways. It really doesn't \"do anything\" aside from evaluate the sequence and print it. How I choose to do that is up to me. I make various choices in order to minimize my cognitive load.\n\nAs an example, for that final line, I might go:\n\n<pre style=\"font-family:Consolas;font-size:13px;color:black;background:white;\"><span style=\"color:blue;\">let</span>&nbsp;fizzBuzz&nbsp;n&nbsp;&nbsp;=&nbsp;n&nbsp;|&gt;&nbsp;Seq.map&nbsp;findMatch&nbsp;|&gt;&nbsp;Seq.iteri&nbsp;(printfn&nbsp;<span style=\"color:#a31515;\">&quot;%i&nbsp;%s&quot;</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;fizzBuzz&nbsp;[1..100]\n</pre>\n\nIn that case, I've collapsed everything down to one token, \"fizzBuzz\" that handles everything but the range of numbers. This allows me to change it up.\n\n<pre style=\"font-family:Consolas;font-size:13px;color:black;background:white;\">fizzBuzz&nbsp;[50..200]\n</pre>\n\n*I know this sounds trivial but it's not*. I made the decisions around the tokens based on anticipated usage in my project. I have wide freedom to join things up -- or not. There is a skill to make tokens that come together in a \"mini-language\" to solve the type of problem in front of me. I don't write the solution; I write the pieces I then can assemble together in various ways to make the solution.\n\nNow let's look at the C# code.\n\n<pre style=\"font-family:Consolas;font-size:13px;color:black;background:white;\"><span style=\"color:green;\">///&nbsp;from&nbsp;https://stackoverflow.com/questions/11764539/writing-fizzbuzz</span>\n<span style=\"color:blue;\">namespace</span>&nbsp;oop\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">Program</span>\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;DoFizzBuzz1()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">for</span>&nbsp;(<span style=\"color:blue;\">int</span>&nbsp;i&nbsp;=&nbsp;1;&nbsp;i&nbsp;&lt;=&nbsp;100;&nbsp;i++)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;fizz&nbsp;=&nbsp;i&nbsp;%&nbsp;3&nbsp;==&nbsp;0;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;buzz&nbsp;=&nbsp;i&nbsp;%&nbsp;5&nbsp;==&nbsp;0;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>&nbsp;(fizz&nbsp;&amp;&amp;&nbsp;buzz)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine&nbsp;(i.ToString()&nbsp;+&nbsp;<span style=\"color:#a31515;\">&quot;&nbsp;FizzBuzz&quot;</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">else</span>&nbsp;<span style=\"color:blue;\">if</span>&nbsp;(fizz)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine&nbsp;(i.ToString()&nbsp;+&nbsp;<span style=\"color:#a31515;\">&quot;&nbsp;Fizz&quot;</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">else</span>&nbsp;<span style=\"color:blue;\">if</span>&nbsp;(buzz)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine&nbsp;(i.ToString()&nbsp;+&nbsp;<span style=\"color:#a31515;\">&quot;&nbsp;Buzz&quot;</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">else</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine&nbsp;(i);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;Main(<span style=\"color:blue;\">string</span>[]&nbsp;args)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(<span style=\"color:#a31515;\">&quot;Hello&nbsp;World!&quot;</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoFizzBuzz1();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}\n</pre>\n\nFor the F# code, I mashed up some code I found on the net. For the C# code, I went to SO and found the top answer to the \"How to do FizzBuzz\" question. That's the fairest way I know how to handle this.\n\nThe C# code is about three times longer. Here's what stands out:\n\n- It's all in a fixed structure. There's a namespace. There's a class. There's a method. Everything has a place and is part of everything else. Things are where they are for a reason.\n- Looking at the structure, it feels like adding new rules makes things more complex. I'm pretty sure a new rule would involve a new line after those two \"bool\" lines with fizz and buzz in them, but then we get into that nested if/else-if/else-if/else structure and something's going to have to change there. Very easy to do, of course My feeling is that adding new rules makes things more complex, where with FP we reached a complexity peak and then it was easy. You might phrase that as \"with FP we started off generic\" On the SO page there was another C# example that offered generic rules, but the other commenters said -- and I agree -- that it looked overly complex. Frankly it looked like a lot of FP crammed into an OOP app. But it was more generic. It's just not the code you'd most likely end up with as a C# programmer. (Remember that code-is-code, and you can just about do anything with anything. The issue today is why coding on average in one paradigm turns out differently than coding on average in another one, not what's possible or what you can or can't do.)\n- It looks much more capable in regards to components and reusability. This is where things get odd. Technically, the C# code *should be* better at components. We have a namespace. That prevents components from getting mixed up. We have a class, \"Program\", that allows us encapsulation and data hiding for our work, preventing consumers from having to worry about how we do things. I've made the method static, but even if we leave it static, an object wrapper clarifies that \"DoFizzBuzz1\" is *this particular version*, perhaps not the same one as one offered by \"Program2\" -- or Program with perhaps a different constructor. If nothing else, in OO things have the appearance of being especially constructed for reuse.\n\nIn the C# code, I'm not managing tokens to create a mini-language, I'm managing structure to keep my code organized. Things go into certain places in OOP, and we have rules to explain when and where they're supposed to go. It's an organization system.\n\nSo on the surface, the C# code should be much better set up to be a reusable component. It's better-organized, after all.\n\nOnly one way to check that. Let's build a component.\n\nCan I drop the C# code into another container, say something to render HTML from a server to a client?\n\nWell, not so much. Everything is stuck in the Main method, and *the Main method is coupled to the DoFizzBuzz1 method*. In addition, the range, 1 to 100, is coupled to the implementation. The class is the way it is because it's coupled to being a C# console app. Most of the difference you see in line count between the two is because the C# app is a template. Everything is stuck together in a tightly-coupled, rigid, yet oddly mutable structure.\n\n<div>\n    <div class=\"embed-responsive embed-responsive-16by9\">\n      <iframe class=\"embed-responsive-item\" src=\"https://www.youtube.com/embed/11xLxy-VVSA?rel=0\" allowfullscreen></iframe>\n    </div>\n    <p class=\"figure-caption text-center text-muted\">\n    Code walkthrough. At the end I get a bit mixed up about components and reuse. The topic here is general reuse. Building components to fit into sockets is another situation with its own problems.\n    </p>\n</div>\n\nNone of that is right or wrong, but we run into three or four problems trying to reuse 30 lines of C# that just gets worse the more code we have: *everything is coupled to everything else and mutability makes the linkages impossible to separate*. In fact, because objects are both data and code, **that's by design**. It's supposed to work that way!\n\nWe'd probably want an \"HtmlProgram\" class instead of a Program class. Maybe we'd want an HtmlRenderer class because, dang it, that Html stuff has to go somewhere. FizzBuzz factory? [Enterprise FizzBuzz](https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition), anyone?\n\nHow about the F# code? Sure. I've got one line of code in main that I'd need to put somewhere else. Everything else is in the global namespace. Using my second example, if I need to change the range, it's easy -- not coupled to anything. **In pure FP everything is loosely-coupled until the last responsible moment**. Remember, I could juggle those tokens around any way I want right up until that last line. I have wide latitude. OO, on the other hand, requires us to commit to a design early on, as soon as we have enough code and data that indicate it. Otherwise, there's no point in using OO.\n\nIt's important to note that this isn't a C#-bashing essay. One of these isn't better or worse than the other one. They simply solve problems in vastly different ways. The OO code scales up to large, monolithic apps where everything has a place. The FP code scales *out* to tokens that create a DSL that callers can use to do whatever they want using a new language. In OO, I end up with a big honking chunk of data and code that's guaranteed to do exactly what I need (because of testing). In FP, I end up with a new language that I am responsible for to use to create whatever I like (and test as I go.)\n\nBut when the endgame is reuse, say in microservices, the two paradigms lead to drastically different answers. The pure FP paradigm will create reusable code, with added complexity being the responsibility of the consumer in large applications. The OO code will create non-reusable code, with the simplicity of knowing that when you call object-dot-method? The thing that you need will happen. For many, many cases, OO is the better paradigm. It's just never going to make reusable components. Not in a generic sense. You can't get there from here.\n\nOn the other hand, in pure FP you create nothing but reusable components. It's just not clear how they fit together.\n\nMoving to theory, it's even more clear what's happening. All code, no matter the language, is a form of structure that you create in response to a problem. The structure is based on two and only two things: desired future behavior and supplementals (or non-functionals, if you like) Even if you never write anything down, as you type code in you're thinking about whether or not it creates a system that behaves the way you want given all the rules you want to abide by. (Rules being the supplementals)\n\n*In pure FP, I have no supplementals.* That is, there's no SOLID or other things that make me code one way or the other. Everything I write is with the goal of minimizing cognitive complexity while exhibiting the behavior I want. That's it. End of story.\n\n*In OO, the supplementals are more important than the behavior*. Don't believe me? Ever start in with a new framework and have to implement a bunch of interfaces for your objects, even though none of them are called? Why is that? It's because the rules of using the framework are more important than what you're using the framework to do. It has to be that way. That's the core assumption of OO. Things have a place they go in. Frameworks that do a lot of stuff by definition have to have a lot of places for that stuff to go.\n\nIn OO, I am looking outward, building a set of constructs that represent the problem such that I can easily understand and change them. In FP, I am looking inward, trying to use primitives in the simplest transform possible that doesn't involve mutation.\n\nWhen I tried to reuse the C# code, there was a lot of shuffling around for the code to match the new container I was proposing.\n\nIn many ways, good OO is the same as writing down requirements ahead of writing code to fix the problem. It creates a natural, immediate impedance mismatch between what you want -- which you may not know until very late in the game or even after you are done -- and what you can deliver because of all of the other choices you've made.\n\nGood FP projects create reusable components, starting with just 2 lines of code. Good OO projects create understandable code structures, no matter how big the codebase gets. If you want true components and reusability, do straight, pure FP without any supplementals at all, then add whatever you need in at the last responsible moment you can do so. (Insert long discussion here about how the worst thing you can do is mash together paradigms. FP trying to pretend that it is OO can be some of the ugliest code you'll ever see. Pick one and go with it.)\n\nNow you know why.\n\n![Daniels Signature](DanielsSignature)","Tags":["recIPGRFebYI7QFwM"],"Categories":["recZLPmdZt7GBUMCG"],"ID":7,"Excerpt":"We keep trying and trying to build truly reusable components, but we rarely succeed. Why?","Authors":["recPwgCd6QGPvd5Fg"]},"createdTime":"2018-12-06T23:01:19.000Z"},{"id":"recXmHgxSFwTTZy1t","fields":{"TemplateFile":"Entry2.html","Blog":["recCGKQBlTWHqrGCu"],"StartDate":"2018-12-06T17:50:00.000Z","Approved":true,"Title":"Minimum Blogging Platform","Content":"## What's the minimum code and structure for a blog?\n\n### *(It's less than you think)*\n\nA while back, I was asked to take a look at moving some corporate assets from Wordpress and other content-delivery mechanisms to something more secure and scalable. It was a new finance company, there was a lot of money involved, and when bad content or a crashed site can move millions of dollars, you need to be a lot more careful than the average blogger.\n\nThen there's hacking. Any time there is a server involved, you have a complex system of code and dependencies that hackers can get into and then alter your content. Maybe they send folks to a fake trading site instead of the real one. The attack vectors and scenarios get ugly very quickly. Npm spearfishing, anyone?\n\nSo I brought up the sites and took a look around under the hood. Nothing unusual or complex -- yet. Some Wordpress, some content generation tools, some plugins and libraries here and there. Somebody was using webpack somewhere. Maybe 20 unique pages and 100 or so blog entries? Half-a-dozen COTS plugins. A few domains.\n\nGood news! Whatever they wanted to do, now was the time to do it.\n\nNext? \"How simple and hack-proof can I make this?\"\n\nWatch the video if you'd like the tour. **Spoiler Alert**: The entire thing collapses down to almost nothing while keeping everything you'd ever want in a blog.\n\n<div>\n    <div class=\"embed-responsive embed-responsive-16by9\">\n      <iframe class=\"embed-responsive-item\" src=\"https://www.youtube.com/embed/XUjfD55SMxc?rel=0\" allowfullscreen></iframe>\n    </div>\n    <p class=\"figure-caption text-center text-muted\">\n    17-Minute Code Walkthrough\n    </p>\n</div>\n\nIt works anywhere because it's all flat and static, yet it's still interactive. But for the total effect, for the Big Kahuna? You can hook GitHub into AWS so that the entire thing goes serverless -- and has S3/CDN capabilities auto-baked in. For a medium-trafficked-blog, say 20-200k visits? I'm thinking a buck-a-day or so. (Don't quote me.) I know that it autoscales based on traffic. I know that there's nothing for you to do: no servers to update, no security patches, no wondering if you're paying too much.\n\nAll you have to do is, well, blog. Use GitHub if you want to change the design somehow -- which you should be doing no matter how you're delivering content, right?\n\nToo crazy to work? I don't know. You tell me. You're using it right now.\n\nWelcome to the new world!\n\nI could easily push this even further, batch up the few files that are linked in and make it all just one file. Hell, I'd probably do that just to finish up the exercise. The problem: Just like I don't want to get too coupled on the back-end, depending on a certain server or databases services, I don't want to get too coupled on the front-end, either. I might want to upgrade to the latest version of Bootstrap, or Vue.js. It would suck to have to go through all my entries and update every page. Same goes for site-wide theming. Javascript support libraries. Some things should be tightly-coupled. Some things not.\n\nI'm not sure I understand the problem. Ha! What's not to understand about blogging? A great deal, actually. Would I want a lot of template pages for various posts? Would I want a separate page for Categories or Tags?\n\nThere's blogging *in the abstract* and then there's blogging *that I actually do*. These two things can be miles apart! Good architecture is always based on actual usage, not theory, speculation, or patterns you read in a book somewhere. Those are good things, but they're just helpers.\n\nRight now I simply don't know. We find out such things by *using the app*. This is **\"emergent design\"**. I've used blogs my entire life. I know enough to get started -- but the only way to really know is to engage with the problem. So I'll blog some. Have some folks drop by. Figure out what I want. After all, 100 lines of code is pretty easy to modify if I want to later on, when I know more.\n\n**Aside 1**: This was done in just a few days of work while doing other stuff. Compare and contrast that to a typical corporate project, where somebody walks into an office and says \"Hey team! We need to build a new content delivery platform!\" Right now, two weeks later, if we were *lucky*, we'd be hip-deep in database design and framework/IDE spin-up, whereas I'm already moving on to other things. You know, there just might be something to this emergent design stuff. You should check it out! Shameless plug: I wrote [a book describing how to work from taking notes to building code](https://leanpub.com/info-ops?ref=tgbentry1) -- and I'm showing how it all works on the blog.\n\n**Aside 2**: My guess is that with a couple of more weeks of work -- basically pulling out the Vue.js code into reusable components and providing standard views into the data -- and this is e a world-class blogging system. Looking at the simplicity, I really feel the pain for you PHP folks living in WP plug-in land. Oof.\n\nThanks for reading. Let's do it again sometime!\n\n![Daniels Signature](DanielsSignature)\n","Tags":["recIPGRFebYI7QFwM"],"Categories":["recZLPmdZt7GBUMCG"],"ID":6,"Excerpt":"What's the minimal blogging platform (aside from plain html)? You're reading on it!","Authors":["recPwgCd6QGPvd5Fg"]},"createdTime":"2018-12-06T22:49:10.000Z"},{"id":"rec7eixYJR006U879","fields":{"TemplateFile":"Entry2.html","Blog":["recCGKQBlTWHqrGCu"],"StartDate":"2019-01-12T06:00:00.000Z","Approved":true,"Title":"Nose picking","Content":"## AirBlog Part 2: Growing Up\n\n### What's Old\n\n### What's New\n\n### What's Cool\n\n### What Sucks\n\n FIX COMPONENTS 106 fail. Tag with no lookup\n Lack of RI means I can reference things that exist -- but not in this context\n\n\nExperience with Vue\nNew ES6 JS goodness\nfunctional code map,\narrow function goodness\nmodules -- have to use a server\nnew template literal are quite nice\ndidn't get to try default parameters\n\nmay have lost track of my closures -- don't think I did. we'll see\nvariable/method visibility from inside object/modules kung fu weak\ntime lost to pixel-pushing\n\ndone nothing with main.css Using default boostrap stuff might be a nice mezzanine between CLI demos and a full-UX cornucopia. Easy to do and quick (Some really cool stuff going on in the F# area along these lines as well)\n\n<div class=\"media border p-3\">\n    <div class=\"mr-3 mt-3 rounded-circle\" style=\"width:360px;\">\n        <div class=\"media-body\">\n\n![Not a giraffe](2019-ABv2DB-center)\n\n<p>Lorem ipsum...</p>\n        </div>\n    </div>\n</div>\n\n\n**MOOSE NO GOOD**\n\n![Not a giraffe](2019-ABv2DB-center)\n\n*Do not touch that giraffe!* \n\nStill having issues with what to fake out. AT and Vue run with most anything -- and I will too, but I need to fail in various ways depending on what's missing.\n\nInteresting that the system is failing in important ways, like RI or missing data. Not BS ways, like server credentials.\n\n\n\n\n\n<pre style=\"font-family:Consolas;font-size:13px;color:black;background:white;\"><span style=\"color:blue;\">&lt;</span><span style=\"color:maroon;\">body</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;</span><span style=\"color:maroon;\">div</span>&nbsp;<span style=\"color:red;\">class</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;container&quot;</span>&nbsp;<span style=\"color:red;\">id</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;mainApp&quot;</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;</span><span style=\"color:maroon;\">header</span>&nbsp;<span style=\"color:red;\">class</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;header&quot;</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;</span><span style=\"color:maroon;\">nav</span>&nbsp;<span style=\"color:red;\">class</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;navbar&nbsp;navbar-dark&nbsp;fixed-top&nbsp;bg-dark&quot;</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;</span><span style=\"color:maroon;\">a</span>&nbsp;<span style=\"color:red;\">class</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;navbar-brand&quot;</span>&nbsp;<span style=\"color:red;\">href</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;index.html&quot;</span>&nbsp;<span style=\"color:red;\">v-cloak</span><span style=\"color:blue;\">&gt;</span><span style=\"font-weight:bold;\">{{</span><span style=\"color:purple;\">atMyBlog.fields.Title</span><span style=\"font-weight:bold;\">}}</span><span style=\"color:blue;\">&lt;/</span><span style=\"color:maroon;\">a</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;</span><span style=\"color:maroon;\">button</span>&nbsp;<span style=\"color:red;\">class</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;navbar-toggler&quot;</span>&nbsp;<span style=\"color:red;\">type</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;button&quot;</span>&nbsp;<span style=\"color:red;\">data-toggle</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;collapse&quot;</span>&nbsp;<span style=\"color:red;\">data-target</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;#togglerMain&quot;</span>&nbsp;<span style=\"color:red;\">aria-controls</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;togglerMain&quot;</span>&nbsp;<span style=\"color:red;\">aria-expanded</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;false&quot;</span>&nbsp;<span style=\"color:red;\">aria-label</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;Main&nbsp;Nav&quot;</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;</span><span style=\"color:maroon;\">span</span>&nbsp;<span style=\"color:red;\">class</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;navbar-toggler-icon&quot;</span><span style=\"color:blue;\">&gt;&lt;/</span><span style=\"color:maroon;\">span</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;/</span><span style=\"color:maroon;\">button</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;</span><span style=\"color:maroon;\">div</span>&nbsp;<span style=\"color:red;\">class</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;collapse&nbsp;navbar-collapse&quot;</span>&nbsp;<span style=\"color:red;\">id</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;togglerMain&quot;</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;</span><span style=\"color:maroon;\">ul</span>&nbsp;<span style=\"color:red;\">class</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;navbar-nav&quot;</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;</span><span style=\"color:maroon;\">li</span>&nbsp;<span style=\"color:red;\">class</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;nav-item&quot;</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;</span><span style=\"color:maroon;\">nav-menu-sub-list</span>&nbsp;<span style=\"color:red;\">:itemlist</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;atCategories.records&quot;</span>&nbsp;<span style=\"color:red;\">entityname</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&#39;Category&#39;</span>&nbsp;<span style=\"color:red;\">tablename</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&#39;Categories&#39;</span><span style=\"color:blue;\">&gt;&lt;/</span><span style=\"color:maroon;\">nav-menu-sub-list</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;/</span><span style=\"color:maroon;\">li</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;</span><span style=\"color:maroon;\">li</span>&nbsp;<span style=\"color:red;\">class</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;nav-item&quot;</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;</span><span style=\"color:maroon;\">nav-menu-sub-list</span>&nbsp;<span style=\"color:red;\">:itemlist</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;atTags.records&quot;</span>&nbsp;<span style=\"color:red;\">entityname</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&#39;Tag&#39;</span>&nbsp;<span style=\"color:red;\">tablename</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&#39;Tags&#39;</span><span style=\"color:blue;\">&gt;&lt;/</span><span style=\"color:maroon;\">nav-menu-sub-list</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;/</span><span style=\"color:maroon;\">li</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;</span><span style=\"color:maroon;\">li</span>&nbsp;<span style=\"color:red;\">class</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;nav-item&quot;</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;</span><span style=\"color:maroon;\">nav-menu-sub-list</span>&nbsp;<span style=\"color:red;\">:itemlist</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;atQuestions.records&quot;</span>&nbsp;<span style=\"color:red;\">entityname</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&#39;Question&#39;</span>&nbsp;<span style=\"color:red;\">tablename</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&#39;Questions&#39;</span><span style=\"color:blue;\">&gt;&lt;/</span><span style=\"color:maroon;\">nav-menu-sub-list</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;/</span><span style=\"color:maroon;\">li</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;</span><span style=\"color:maroon;\">li</span>&nbsp;<span style=\"color:red;\">class</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;nav-item&nbsp;bg-dark&nbsp;navbar-dark&quot;</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;</span><span style=\"color:maroon;\">a</span>&nbsp;<span style=\"color:red;\">class</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;nav-item&nbsp;helpabout&nbsp;bg-dark&nbsp;navbar-dark&quot;</span>&nbsp;<span style=\"color:red;\">href</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;#&quot;</span>&nbsp;<span style=\"color:red;\">data-toggle</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;modal&quot;</span>&nbsp;<span style=\"color:red;\">data-target</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;#modalAbout&quot;</span><span style=\"color:blue;\">&gt;</span>About<span style=\"color:blue;\">&lt;/</span><span style=\"color:maroon;\">a</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;/</span><span style=\"color:maroon;\">li</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;/</span><span style=\"color:maroon;\">ul</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;/</span><span style=\"color:maroon;\">div</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;/</span><span style=\"color:maroon;\">nav</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;/</span><span style=\"color:maroon;\">header</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;</span><span style=\"color:maroon;\">div</span>&nbsp;<span style=\"color:red;\">id</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;itemDetailApp&quot;</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;</span><span style=\"color:maroon;\">entry-detailfull-component</span>&nbsp;<span style=\"color:red;\">:entry</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;atMyEntry&quot;</span><span style=\"color:blue;\">&gt;&lt;/</span><span style=\"color:maroon;\">entry-detailfull-component</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;/</span><span style=\"color:maroon;\">div</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;</span><span style=\"color:maroon;\">div</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;</span><span style=\"color:maroon;\">entry-explore-footer</span>&nbsp;<span style=\"color:red;\">:entry</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;atMyEntry&quot;</span><span style=\"color:blue;\">&gt;&lt;/</span><span style=\"color:maroon;\">entry-explore-footer</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;/</span><span style=\"color:maroon;\">div</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:darkgreen;\">&lt;!--&nbsp;Modal&nbsp;About&nbsp;the&nbsp;blog&nbsp;--&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;</span><span style=\"color:maroon;\">div</span>&nbsp;<span style=\"color:red;\">class</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;modal&quot;</span>&nbsp;<span style=\"color:red;\">id</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;modalAbout&quot;</span>&nbsp;<span style=\"color:red;\">tabindex</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;-1&quot;</span>&nbsp;<span style=\"color:red;\">role</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;dialog&quot;</span>&nbsp;<span style=\"color:red;\">aria-labelledby</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;modalAbout&quot;</span>&nbsp;<span style=\"color:red;\">aria-hidden</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;true&quot;</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;</span><span style=\"color:maroon;\">div</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;</span><span style=\"color:maroon;\">modal-about-the-blog</span>&nbsp;<span style=\"color:red;\">:atmyblog</span><span style=\"color:blue;\">=</span><span style=\"color:blue;\">&quot;atMyBlog&quot;</span><span style=\"color:blue;\">&gt;&lt;/</span><span style=\"color:maroon;\">modal-about-the-blog</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;/</span><span style=\"color:maroon;\">div</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;/</span><span style=\"color:maroon;\">div</span><span style=\"color:blue;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">&lt;/</span><span style=\"color:maroon;\">div</span><span style=\"color:blue;\">&gt;</span>&nbsp;<span style=\"color:darkgreen;\">&lt;!--&nbsp;container&nbsp;!--&gt;</span>\n<span style=\"color:blue;\">&lt;/</span><span style=\"color:maroon;\">body</span><span style=\"color:blue;\">&gt;</span></pre>\n\n\n\n\n\n","AdminNotes":"Same","ReferenceLink":"cnn.com","Tags":["recSfRhJdArFwzoIa"],"Questions":["recbHiSxqyBiNiuDv","reckKRruy3mvt092D"],"Categories":["recD6fV22IR0LSVdB"],"ID":30,"Excerpt":"Nickels and hand grenades","Authors":["recPwgCd6QGPvd5Fg"]},"createdTime":"2019-01-12T15:35:48.000Z"}]}